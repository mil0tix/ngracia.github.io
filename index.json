[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Go পরিচিতি"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"বেসিক টাইপ সমূহ"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"ফাইল ম্যানিপুলেশন"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"ব্যাশ ভেরিয়েবল"},{"categories":["Life"],"contents":"My Daily Routine Sports and Physical Activities Every day, I make sure to prioritize my physical well-being. My routine includes approximately 30 minutes of biking, which can vary depending on whether I\u0026rsquo;m working remotely or other factors. According to the World Health Organisation adults aged between 18-64 years should do at least 150–300 minutes of moderate-intensity aerobic physical activity, so I always like to do some cardio, moreover it makes me feel good. Apart from cardio I also like to do muscle strengthening. I usually do push pull legs workouts twice a week, whether it\u0026rsquo;s at the gym or at street workout parks. However, I also like doing diverse physical activities so I usually skip my workout days to do sports like tennis, volleyball, football, and even dance. My workouts are enough intense to progress but not too intense to be able to stick to my routine without being fatigued.\nMeal Preps Nutrition is a crucial part of maintaining a balanced lifestyle. I\u0026rsquo;m a dedicated meal prepper, ensuring that I have a nutritious meal ready for the next day to avoid long meal breaks. My meal prep is pretty simple. It always includes 3 important components: protein sources like chicken, salmon, or beef, coupled with carbohydrates like rice or pasta, and vegetables. On weekends, I allow myself to be more flexible, enjoying restaurant meals. I eat a lot of fruits, my favorites being bananas, kiwis and tangerines in season.\nSleep A good night\u0026rsquo;s sleep is non-negotiable in my routine. I aim for a solid 7-8 hours of rest every night. To ensure a peaceful night\u0026rsquo;s sleep, I have a calming bedtime routine. I brush my teeths, do my skincare and then I like to wind down with a good book; currently, I\u0026rsquo;m immersed in Brandon Sanderson\u0026rsquo;s \u0026ldquo;The Final Empire\u0026rdquo;. I make sure to close all windows and shut off every light, creating the perfect sleep environment.\n","date":"August 7, 2023","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/posts/my-life/about-me/my-routine/","summary":"My Daily Routine Sports and Physical Activities Every day, I make sure to prioritize my physical well-being. My routine includes approximately 30 minutes of biking, which can vary depending on whether I\u0026rsquo;m working remotely or other factors. According to the World Health Organisation adults aged between 18-64 years should do at least 150–300 minutes of moderate-intensity aerobic physical activity, so I always like to do some cardio, moreover it makes me feel good.","tags":["life","routine"],"title":"My routine"},{"categories":["Life"],"contents":"Setup My coding setup consists of a dual-monitor arrangement and a high-performance PC featuring a GeForce 3080, an i7-12700KF, 32GB RAM 2400MHz, and a 2TB SSD. This configuration allows me to efficiently handle large datasets and run resource-intensive algorithms, enhancing my productivity.\n","date":"August 6, 2023","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/posts/my-life/about-me/my-setup/","summary":"Setup My coding setup consists of a dual-monitor arrangement and a high-performance PC featuring a GeForce 3080, an i7-12700KF, 32GB RAM 2400MHz, and a 2TB SSD. This configuration allows me to efficiently handle large datasets and run resource-intensive algorithms, enhancing my productivity.","tags":["pc"],"title":"My setup"},{"categories":["Basic"],"contents":"Creation of pre-trained autoencoder to learn the initial condensed representation of unlabeled datasets. This architecture consists of 3 parts:\nEncoder: Compresses the input data from the train-validation-test set into a coded representation which is typically smaller by several orders of magnitude than the input data. Latent Space: This space contains the compressed knowledge representations and is thus the most crucial part of the network. Decoder: A module that helps the network to \u0026ldquo;decompress\u0026rdquo; the knowledge representations and reconstruct the data from their coded form. The output is then compared to a ground truth. Imports from time import time import numpy as np import keras.backend as K from keras.layers import Dense, Input, Layer, InputSpec, Conv2D, MaxPooling2D, UpSampling2D, Flatten, Reshape, Conv2DTranspose from keras.models import Model from keras.initializers import VarianceScaling from sklearn.cluster import KMeans from sklearn.cluster import MiniBatchKMeans from sklearn import metrics from sklearn.metrics import accuracy_score import matplotlib.pyplot as plt from sklearn.manifold import TSNE from sklearn.decomposition import PCA Loading the data from keras.datasets import mnist from keras.datasets import fashion_mnist import numpy as np # Chargement et normalisation (entre 0 et 1) des données de la base de données MNIST (x_train, y_train), (x_test, y_test) = mnist.load_data() x_train = x_train.astype(\u0026#39;float32\u0026#39;) / 255. x_test = x_test.astype(\u0026#39;float32\u0026#39;) / 255. x_train = np.reshape(x_train, (len(x_train), 784)) x_test = np.reshape(x_test, (len(x_test), 784)) Classic Autoencoder # Dimension de l\u0026#39;entrée input_img = Input(shape=(784,)) # Dimension de l\u0026#39;espace latent : PARAMETRE A TESTER !! latent_dim = 10 # Définition du encodeur x0 = Dense(500, activation=\u0026#39;relu\u0026#39;)(input_img) x = Dense(200, activation=\u0026#39;relu\u0026#39;)(x0) encoded = Dense(latent_dim, activation=\u0026#39;relu\u0026#39;)(x) # Définition du décodeur decoder_input = Input(shape=(latent_dim,)) x = Dense(200, activation=\u0026#39;relu\u0026#39;)(decoder_input) x1 = Dense(500, activation=\u0026#39;relu\u0026#39;)(x) decoded = Dense(784, activation=\u0026#39;relu\u0026#39;)(x1) # Construction d\u0026#39;un modèle séparé pour pouvoir accéder aux décodeur et encodeur encoder = Model(input_img, encoded) decoder = Model(decoder_input, decoded) # Construction du modèle de l\u0026#39;auto-encodeur encoded = encoder(input_img) decoded = decoder(encoded) autoencoder = Model(input_img, decoded) Summary # Autoencodeur autoencoder.compile(optimizer=\u0026#39;Adam\u0026#39;, loss=\u0026#39;mse\u0026#39;) autoencoder.summary() print(encoder.summary()) print(decoder.summary()) Training autoencoder.fit(x_train, x_train, epochs=20, batch_size=128, shuffle=True, validation_data=(x_test, x_test)) Evaluation # Encode and decode some digits # Note that we take them from the *test* set encoded_imgs = encoder.predict(x_test) decoded_imgs = decoder.predict(encoded_imgs) Visualization n = 10 # How many digits we will display plt.figure(figsize=(20, 4)) for i in range(n): # Display original ax = plt.subplot(2, n, i + 1) plt.imshow(x_test[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) # Display reconstruction ax = plt.subplot(2, n, i + 1 + n) plt.imshow(decoded_imgs[i].reshape(28, 28)) plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) plt.show() Display # Affichage count=1000 idx = np.random.choice(len(x_test), count) inputs = x_test[idx] coordsAC = encoder.predict(inputs) coordsTSNE = TSNE(n_components=2).fit_transform(inputs.reshape(count, -1)) coordsPCA = PCA(n_components=2).fit_transform(inputs.reshape(count, -1)) classes = y_test[idx] fig, ax = plt.subplots(figsize=(10, 7)) ax.set_title(\u0026#34;Espace latent\u0026#34;) plt.scatter(coordsAC[:, 0], coordsAC[:, 1], c=classes, cmap=\u0026#34;Paired\u0026#34;) plt.colorbar() fig2, ax2 = plt.subplots(figsize=(10, 7)) ax2.set_title(\u0026#34;ACP sur espace latent\u0026#34;) plt.scatter(coordsPCA[:, 0], coordsPCA[:, 1], c=classes, cmap=\u0026#34;Paired\u0026#34;) plt.colorbar() fig3, ax3 = plt.subplots(figsize=(10, 7)) ax3.set_title(\u0026#34;tSNE sur espace latent\u0026#34;) plt.scatter(coordsTSNE[:, 0], coordsTSNE[:, 1], c=classes, cmap=\u0026#34;Paired\u0026#34;) plt.colorbar() ","date":"January 10, 2022","hero":"/posts/ai/machine-learning/autoencoder/images/coded-decoded-mnist.jpg","permalink":"https://noegracia.github.io/posts/ai/machine-learning/autoencoder/","summary":"Creation of pre-trained autoencoder to learn the initial condensed representation of unlabeled datasets. This architecture consists of 3 parts:\nEncoder: Compresses the input data from the train-validation-test set into a coded representation which is typically smaller by several orders of magnitude than the input data. Latent Space: This space contains the compressed knowledge representations and is thus the most crucial part of the network. Decoder: A module that helps the network to \u0026ldquo;decompress\u0026rdquo; the knowledge representations and reconstruct the data from their coded form.","tags":["AI","ML","Autoencoder"],"title":"Autoencoder"},{"categories":["Basic"],"contents":"Skin Cancer Detection Tool README.md Overview The objective of this project is to build a Skin Cancer Detection Tool. The tool that we are creating is a segmentation model of spots (moles, melanomas, etc\u0026hellip;) on microscopic images of the skin. To create this tool we will have to train a semantic segmentation AI model. The data that we use for that training is from The International Skin Imaging Collaboration.\nFile Descriptions: data.py: Contains functions to process and load the dataset, preprocess the images, and masks and to create TensorFlow datasets.\nprocess_data(data_path, file_path): Reads the image and mask paths from the dataset. load_data(path): Load training, validation, and test data. read_image(x) and read_mask(x): Read the images and the masks respectively. tf_dataset(x, y, batch=8): Create a TensorFlow dataset. preprocess(x, y): Preprocess the images and masks. predict.py: Uses a pretrained model to make predictions on new images.\nget_data(): Load test images from the INPUT_FOLDER. Then, predictions are made using the loaded model and saved to the OUTPUT_FOLDER. Setup \u0026amp; Requirements Requirements: python 3.x pandas numpy scikit-learn tensorflow 2.x opencv-python You can install these requirements using:\npip install pandas numpy scikit-learn tensorflow opencv-python Steps to Run: Data Preparation:\nPlace your dataset in an appropriate directory. Adjust the paths in the data.py script. Run the data.py script to check if data is loaded properly. python data.py Predicting:\nPlace your test images in the INPUT_FOLDER. Ensure the model path \u0026ldquo;segm_model\u0026rdquo; in predict.py corresponds to your trained model. Run the predict.py script to make predictions. python predict.py Notes This tool currently segments the spots and saves the segmented images in the OUTPUT_FOLDER. You might need to train the model first using your data to get the \u0026ldquo;segm_model\u0026rdquo;. Ensure the directories mentioned in the scripts exist or are modified according to your directory structure. ","date":"August 10, 2021","hero":"/posts/ai/machine-learning/segmentation/images/portada-segm.jpg","permalink":"https://noegracia.github.io/posts/ai/machine-learning/segmentation/","summary":"Skin Cancer Detection Tool README.md Overview The objective of this project is to build a Skin Cancer Detection Tool. The tool that we are creating is a segmentation model of spots (moles, melanomas, etc\u0026hellip;) on microscopic images of the skin. To create this tool we will have to train a semantic segmentation AI model. The data that we use for that training is from The International Skin Imaging Collaboration.\nFile Descriptions: data.","tags":["AI","ML","Autoencoder","Personal Project"],"title":"Skin Cancer Detection using semantic segmentation"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://noegracia.github.io/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]