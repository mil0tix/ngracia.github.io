<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Noé GRACIA</title><link>https://noegracia.github.io/</link><description>Recent content on Noé GRACIA</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 05 Feb 2024 16:18:46 +0000</lastBuildDate><atom:link href="https://noegracia.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Aneto</title><link>https://noegracia.github.io/posts/my-life/mountain/aneto/</link><pubDate>Mon, 05 Feb 2024 16:18:46 +0000</pubDate><guid>https://noegracia.github.io/posts/my-life/mountain/aneto/</guid><description>Ascending Aneto: Conquering the Pyrenees&amp;rsquo;s Pinnacle The adventure began with anticipation as we gathered our gear, crampons and ice axes, essential for the challenge ahead. From the starting elevation of 1700 meters, we embarked on our ascent to 2140 meters, finding sanctuary at the Renclusa Refuge. Dinner was our prelude to rest, yet sleep proved elusive. At 9 PM, I nestled into my bunk, but the altitude, the cold, and a symphony of nocturnal noises (someone snoring) allowed for only two hours of light slumber.</description></item><item><title>3DP-TP-00 | Segmentation de nuages de points 3D par capteur à lumière structurée RGB-D avec CloudCompare</title><link>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/cc_segmentation/</link><pubDate>Tue, 03 Oct 2023 08:06:25 +0600</pubDate><guid>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/cc_segmentation/</guid><description>Contrôle qualité d&amp;rsquo;objets 3D.</description></item><item><title>Perception 3D</title><link>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/_index.fr/</link><pubDate>Tue, 03 Oct 2023 08:06:25 +0600</pubDate><guid>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/_index.fr/</guid><description/></item><item><title>My routine</title><link>https://noegracia.github.io/posts/my-life/about-me/my-routine/</link><pubDate>Mon, 07 Aug 2023 16:18:46 +0000</pubDate><guid>https://noegracia.github.io/posts/my-life/about-me/my-routine/</guid><description>My Daily Routine Sports and Physical Activities Every day, I make sure to prioritize my physical well-being. My routine includes approximately 30 minutes of biking, which can vary depending on whether I&amp;rsquo;m working remotely or other factors. According to the World Health Organisation adults aged between 18-64 years should do at least 150–300 minutes of moderate-intensity aerobic physical activity, so I always like to do some cardio, moreover it makes me feel good.</description></item><item><title>My setup</title><link>https://noegracia.github.io/posts/my-life/about-me/my-setup/</link><pubDate>Sun, 06 Aug 2023 16:18:46 +0000</pubDate><guid>https://noegracia.github.io/posts/my-life/about-me/my-setup/</guid><description>Setup My coding setup consists of a dual-monitor arrangement and a high-performance PC featuring a GeForce 3080, an i7-12700KF, 32GB RAM 2400MHz, and a 2TB SSD. This configuration allows me to efficiently handle large datasets and run resource-intensive algorithms, enhancing my productivity.</description></item><item><title>3DP-TP-01 | Localisation monoculaire par PnL itérative</title><link>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/monocular_localization/</link><pubDate>Sat, 16 Jul 2022 08:06:25 +0600</pubDate><guid>https://noegracia.github.io/posts/ai/computer-vision/3d_perception/monocular_localization/</guid><description>Iterative estimation of a camera extrinsic parameters.</description></item><item><title>Autoencoder</title><link>https://noegracia.github.io/posts/ai/machine-learning/autoencoder/</link><pubDate>Mon, 10 Jan 2022 08:11:25 +0100</pubDate><guid>https://noegracia.github.io/posts/ai/machine-learning/autoencoder/</guid><description>Creation of pre-trained autoencoder to learn the initial condensed representation of unlabeled datasets. This architecture consists of 3 parts:
Encoder: Compresses the input data from the train-validation-test set into a coded representation which is typically smaller by several orders of magnitude than the input data. Latent Space: This space contains the compressed knowledge representations and is thus the most crucial part of the network. Decoder: A module that helps the network to &amp;ldquo;decompress&amp;rdquo; the knowledge representations and reconstruct the data from their coded form.</description></item><item><title>Skin Cancer Detection using semantic segmentation</title><link>https://noegracia.github.io/posts/ai/machine-learning/segmentation/</link><pubDate>Tue, 10 Aug 2021 08:13:25 +0100</pubDate><guid>https://noegracia.github.io/posts/ai/machine-learning/segmentation/</guid><description>Skin Cancer Detection Tool README.md Overview The objective of this project is to build a Skin Cancer Detection Tool. The tool that we are creating is a segmentation model of spots (moles, melanomas, etc&amp;hellip;) on microscopic images of the skin. To create this tool we will have to train a semantic segmentation AI model. The data that we use for that training is from The International Skin Imaging Collaboration.
File Descriptions: data.</description></item><item><title>Go পরিচিতি</title><link>https://noegracia.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Go বেসিক</title><link>https://noegracia.github.io/notes/go/basic/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/basic/_index.bn/</guid><description/></item><item><title>অ্যাডভান্সড</title><link>https://noegracia.github.io/notes/go/advanced/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/advanced/_index.bn/</guid><description/></item><item><title>বেসিক টাইপ সমূহ</title><link>https://noegracia.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>Flow Control</title><link>https://noegracia.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>ফাইল ম্যানিপুলেশন</title><link>https://noegracia.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>ব্যাশ ভেরিয়েবল</title><link>https://noegracia.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://noegracia.github.io/notes/go/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/go/_index.bn/</guid><description>Go Notes</description></item><item><title>ব্যাশের নোট সমূহ</title><link>https://noegracia.github.io/notes/bash/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noegracia.github.io/notes/bash/_index.bn/</guid><description>Bash Notes</description></item></channel></rss>